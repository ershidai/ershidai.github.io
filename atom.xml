<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>游城二十代</title>
  <icon>https://www.gravatar.com/avatar/d90f04bd0732f3d7148108d21bf2c48c</icon>
  <subtitle>那可不一定</subtitle>
  <link href="http://ershidai.github.io/atom.xml" rel="self"/>
  
  <link href="http://ershidai.github.io/"/>
  <updated>2021-08-12T14:13:43.359Z</updated>
  <id>http://ershidai.github.io/</id>
  
  <author>
    <name>二十代</name>
    <email>leehomxu76@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python-method</title>
    <link href="http://ershidai.github.io/2021/08/12/python-method/"/>
    <id>http://ershidai.github.io/2021/08/12/python-method/</id>
    <published>2021-08-12T12:59:23.000Z</published>
    <updated>2021-08-12T14:13:43.359Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="pip-下载速度"><a href="#pip-下载速度" class="headerlink" title="pip 下载速度"></a>pip 下载速度</h1><p>添加豆瓣源可提高pip下载速率<br>pip 豆瓣源地址： -i  <a href="https://pypi.doubanio.com/simple/">https://pypi.doubanio.com/simple/</a>  –trusted-host pypi.doubanio.com  目标名<br>例：pip install  -i  <a href="https://pypi.doubanio.com/simple/">https://pypi.doubanio.com/simple/</a>  –trusted-host pypi.doubanio.com Django</p><h1 id="Python中的基本method"><a href="#Python中的基本method" class="headerlink" title="Python中的基本method"></a>Python中的基本method</h1><p>字符串(str)方法：    </p><ul><li>count() 返回个数</li><li>find() 返回这个字符所在索引</li><li>split() 分割字符 #这个可以用来字符串转列表</li><li>splitline() 以换行符分割</li><li>join() 与split()对立 连接字符，#’|’.join([‘1’,’2’,’3’])</li><li>strip() 删除两边空格</li><li>Istrip() 删除左边空格</li><li>rstrip() 删除右边空格 用的不多 更多用替换 replace(‘’,’’)</li><li>replace(‘old’,’new’) 替换所有指定字符</li><li>startswith() 是否以参数开头 返回布尔值</li><li>endswith() 是否以参数结尾 </li><li>isdigit() 是否全都是数字构成 返回布尔值</li><li>字符串倒序：str1 = ‘ ‘ R=str1[::-1] print(R)</li></ul><h1 id="printf风格"><a href="#printf风格" class="headerlink" title="printf风格"></a>printf风格</h1><p> %s 占位符  %d 整数占位 %f 浮点占位<br>print(‘I love you,%s,you are my %s’%(name,shabi))</p><h1 id="f-string-格式化"><a href="#f-string-格式化" class="headerlink" title="f-string 格式化"></a>f-string 格式化</h1><p>print(f’I love you,{name},you are my {shabi}’)</p><ol><li>指定宽度，小数点</li></ol><ul><li>{name:&lt;8} 占8个字符并左对齐</li><li>{shabi:&lt;8.1f} .1f表示保留一位小数</li><li>print(r’’) r表示不需转义字符</li></ul><h1 id="列表-list-方法："><a href="#列表-list-方法：" class="headerlink" title="列表(list)方法："></a>列表(list)方法：</h1><ul><li>.append() 在后面添加元素 返回None</li><li>.insert(索引，内容) 插入元素 返回None</li><li>.pop(索引) 删除元素 返回值 是 提取出来的元素</li><li>.remove(值) 按值删除，最多只删除一个 返回None</li><li>.reverse()  颠倒顺序 返回None</li><li>.index(值)  返回索引</li><li>.sort() 排序 返回None</li></ul><h1 id="字典-dict-方法："><a href="#字典-dict-方法：" class="headerlink" title="字典(dict)方法："></a>字典(dict)方法：</h1><p>遍历字典 .items() 将字典存在一个列表中，是个列表</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> account<span class="token punctuation">,</span>level <span class="token keyword">in</span> members<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'account:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>account<span class="token punctuation">&#125;</span></span><span class="token string">,level:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>level<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>members.keys() 返回所有key值在列表里</p><p>members.values() 返回所有values值在列表里</p><p>清空字典所有元素：.clear()</p><p>合并字典：.update(another) #another会覆盖掉原来的字典</p><h1 id="转换method"><a href="#转换method" class="headerlink" title="转换method"></a>转换method</h1><p>字符串转字典,列表:eval()  #eval()可以去掉外层的” “</p><p>列表转字典:dict()</p><p>其他转字符串:str()</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>git学习记录</title>
    <link href="http://ershidai.github.io/2021/08/12/git%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://ershidai.github.io/2021/08/12/git%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2021-08-12T12:53:53.000Z</published>
    <updated>2021-08-12T14:03:45.090Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="git-learn"><a href="#git-learn" class="headerlink" title="git learn:"></a>git learn:</h1><p>显示当前的Git配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config --list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="编辑Git配置文件"><a href="#编辑Git配置文件" class="headerlink" title="编辑Git配置文件"></a>编辑Git配置文件</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config -e <span class="token punctuation">[</span>--global<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="设置提交代码时的用户信息"><a href="#设置提交代码时的用户信息" class="headerlink" title="设置提交代码时的用户信息"></a>设置提交代码时的用户信息</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config <span class="token punctuation">[</span>--global<span class="token punctuation">]</span> user.name <span class="token string">"[name]"</span>$ <span class="token function">git</span> config <span class="token punctuation">[</span>--global<span class="token punctuation">]</span> user.email <span class="token string">"[email address]"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">查看分支：git branch创建分支：git branch name切换分支：git checkout name创建+切换分支：git checkout –b name合并某分支到当前分支：git merge name删除分支：git branch –d name上传到远程库:git remote <span class="token function">add</span> origin https://github.com/123leehom/xulihong-rep.git<span class="token function">git</span> push -u origin master<span class="token punctuation">(</span>fork<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vim的使用记录</title>
    <link href="http://ershidai.github.io/2021/08/12/vim%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://ershidai.github.io/2021/08/12/vim%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2021-08-12T12:53:32.000Z</published>
    <updated>2021-08-12T14:18:48.367Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h1><ul><li>i 进入插入模式</li><li>a 进入添加模式 即在当前光标下一个位置插入字符</li><li>o 在当前行下一行插入字符</li><li>O 在当前行上一行插入字符</li><li>x 删除当前光标下的字符</li><li>I 在行首进入插入模式</li><li>A 在行尾进入插入模式</li></ul><h1 id="normal-模式"><a href="#normal-模式" class="headerlink" title="normal 模式"></a>normal 模式</h1><ul><li>hjkl 左下上右</li></ul><h1 id="指令-方向-动作"><a href="#指令-方向-动作" class="headerlink" title="指令+方向+动作"></a>指令+方向+动作</h1><ul><li>d    | 数量加方向 | 向那个方向删除数量个字符</li><li>dd    剪切整行</li><li>w    向下移动一个词word</li><li>b    向上移动一个词back</li><li>ciw    change in word    删除一个word并进入插入模式#c会进入插入而d不会</li><li>ci”    删掉””里的字符</li><li>f    find </li><li>p    粘贴</li><li>y    复制</li><li>G    移到最后 gg 移到第一行首</li></ul><h1 id="可视化模式"><a href="#可视化模式" class="headerlink" title="可视化模式"></a>可视化模式</h1><ul><li>v    进入该模式</li><li>V    进入该模式的行</li><li>ctr+shift+v    进入该模式的块</li></ul><p>选中后,按:normal 可执行普通模式命令</p><h1 id="番外之cmd编码"><a href="#番外之cmd编码" class="headerlink" title="番外之cmd编码"></a>番外之cmd编码</h1><ul><li>chcp #查看当前cmd的编码格式</li><li>chcp 65001   #换成utf-8代码页</li><li>chcp 936       #换成默认的gbk</li><li>chcp 437       #美国英语</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>matplotlib</title>
    <link href="http://ershidai.github.io/2021/08/12/matplotlib/"/>
    <id>http://ershidai.github.io/2021/08/12/matplotlib/</id>
    <published>2021-08-12T12:52:55.000Z</published>
    <updated>2021-08-12T13:55:54.488Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、导入模块"><a href="#一、导入模块" class="headerlink" title="一、导入模块"></a>一、导入模块</h2><p>import matplotlib.pyplot as plt</p><h2 id="二、bar（）柱状图"><a href="#二、bar（）柱状图" class="headerlink" title="二、bar（）柱状图"></a>二、bar（）柱状图</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> marplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltname <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>name<span class="token punctuation">,</span>values<span class="token punctuation">)</span><span class="token comment">#参数是列表类型，数量要对应</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'x轴标题'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'y轴标题'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、scatter（）点状图"><a href="#三、scatter（）点状图" class="headerlink" title="三、scatter（）点状图"></a>三、scatter（）点状图</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>y<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">#s表示点的大小</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>archlinux安装记录</title>
    <link href="http://ershidai.github.io/2021/08/07/archlinux%E9%85%8D%E7%BD%AE/"/>
    <id>http://ershidai.github.io/2021/08/07/archlinux%E9%85%8D%E7%BD%AE/</id>
    <published>2021-08-07T08:01:14.000Z</published>
    <updated>2021-08-11T13:15:03.907Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="记录安装Archlinux裸机过程"><a href="#记录安装Archlinux裸机过程" class="headerlink" title="记录安装Archlinux裸机过程"></a>记录安装Archlinux裸机过程</h1><h2 id="配置虚拟机的注意事项"><a href="#配置虚拟机的注意事项" class="headerlink" title="配置虚拟机的注意事项"></a>配置虚拟机的注意事项</h2><ul><li>虚拟机设置EFI引导 </li><li>检查方法:<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@archiso ~ <span class="token function">ls</span> /sys/firmware/efi/efivars<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>如果路径下有文件夹的话就是EFI<h2 id="配置网络服务"><a href="#配置网络服务" class="headerlink" title="配置网络服务"></a>配置网络服务</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@archiso ~  <span class="token function">ip</span> a <span class="token comment"># 查看网络ip </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>如果没有网络的话,请执行下面的步骤,有无网络的检查方法: ping qq.com<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@archiso ~  dhcpcd 自动分配ip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="修改镜像源"><a href="#修改镜像源" class="headerlink" title="修改镜像源"></a>修改镜像源</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@archiso ~  <span class="token function">vim</span> /etc/pacman.d/mirrorlist阿里源: http://mirrors.163.com/archlinux/<span class="token variable">$repo</span>/os/<span class="token variable">$arch</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2></li></ul><ol><li><p>查看分区:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@archiso ~  <span class="token function">fdisk</span> -l  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用图形化分区</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@archiso ~  <span class="token function">cfdisk</span> /dev/sda   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>弹出来的第一个界面选第一个<br>分好后:<br><img src="https://img-blog.csdnimg.cn/20210127182017652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNjA1NDM5,size_16,color_FFFFFF,t_70"></p></li><li><p>查看分好后的分区</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@archiso ~  lsblk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210127182133493.png"></p></li><li><p>格式化分区</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@archiso ~  mkfs.fat -F32 /dev/sda1 <span class="token comment"># 将 sda1 格式化为FAT32格式    </span>root@archiso ~  mkfs.ext4 /dev/sda3 <span class="token comment"># 将 根分区 格式化为ext4格式    </span>root@archiso ~ <span class="token function">mkswap</span> /dev/sda2 -L Swap <span class="token comment"># 设置并开启Swap分区   </span>root@archiso ~ <span class="token function">swapon</span> /dev/sda2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>挂载分区</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@archiso ~  <span class="token function">mount</span> /dev/sda3 /mntroot@archiso ~  <span class="token function">mkdir</span> -p /mnt/boot/EFIroot@archiso ~  <span class="token function">mount</span> /dev/sda1 /mnt/boot/EFI<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>安装基本系统</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@archiso ~  pacstrap /mnt base linux linux-firmware <span class="token function">vim</span> networkmanager    root@archiso ~  genfstab -U /mnt <span class="token operator">>></span> /mnt/etc/fstab <span class="token comment"># 生成fstab文件    </span>root@archiso ~  <span class="token function">cat</span> /mnt/etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210127183301296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNjA1NDM5,size_16,color_FFFFFF,t_70"></p></li><li><p>进入系统</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@archiso ~  arch-chroot /mnt  <span class="token punctuation">[</span>root@archiso /<span class="token punctuation">]</span> mkinitcpio -P linux <span class="token comment"># 重新生成ramdisk环境</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>设置时区</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@archiso /<span class="token punctuation">]</span> <span class="token function">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime   <span class="token punctuation">[</span>root@archiso /<span class="token punctuation">]</span> hwclock --systohc --utc <span class="token comment">#调整时间漂移并设置时间标准为UTC    </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>配置地区语言信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@archiso /<span class="token punctuation">]</span> <span class="token function">vim</span> /etc/locale.gen   将en_US.UTF-8 UTF-8 取消注释即可    :x 保存退出     <span class="token punctuation">[</span>root@archiso /<span class="token punctuation">]</span> locale-gen <span class="token comment"># 使之生效     </span><span class="token punctuation">[</span>root@archiso /<span class="token punctuation">]</span> locale -a <span class="token comment"># 列出所有启用的locale  </span><span class="token punctuation">[</span>root@archiso /<span class="token punctuation">]</span> <span class="token builtin class-name">echo</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>en_US.UTF-8 <span class="token operator">></span> /etc/locale.conf  <span class="token punctuation">[</span>root@archiso /<span class="token punctuation">]</span>locale<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建hostname 文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@archiso /<span class="token punctuation">]</span> hostnamectl set-hostname arch-pc <span class="token comment"># arch-pc 是你的主机名,自行替换</span><span class="token punctuation">[</span>root@archiso /<span class="token punctuation">]</span> hostnamectl status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>设置主机名并配置系统网络</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@archiso /<span class="token punctuation">]</span> <span class="token builtin class-name">echo</span> arch-pc <span class="token operator">></span> /etc/hostname  <span class="token punctuation">[</span>root@archiso /<span class="token punctuation">]</span> <span class="token function">vim</span> /etc/hosts编辑如下:   <span class="token number">127.0</span>.0.1   localhost   ::1     localhost   <span class="token number">127.0</span>.1.1   arch-pc.localdomain arch-pc <span class="token comment"># 记得替换你的主机名    </span><span class="token punctuation">[</span>root@archiso /<span class="token punctuation">]</span> pacman -S dhcpcd  <span class="token punctuation">[</span>root@archiso /<span class="token punctuation">]</span> systemctl <span class="token builtin class-name">enable</span> dhcpcd <span class="token comment">#设置为自动启动   </span><span class="token punctuation">[</span>root@archiso /<span class="token punctuation">]</span>pacman -S networkmanager nm-connection-editor network-manager-applist rp-pppoe     <span class="token punctuation">[</span>root@archiso /<span class="token punctuation">]</span> systemctl <span class="token builtin class-name">enable</span> NetworkManager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>引导系统</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@archiso /<span class="token punctuation">]</span> mkinitcpio -P <span class="token comment">#初始化文件系统 注意这里P是大写</span><span class="token punctuation">[</span>root@archiso /<span class="token punctuation">]</span> pacman -S dosfstools grub efibootmgr <span class="token comment">#这里是关键</span><span class="token punctuation">[</span>root@archiso /<span class="token punctuation">]</span> grub-install --target<span class="token operator">=</span>x86_64-efi --efi-directory<span class="token operator">=</span>/boot/EFI --recheck  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210127185740966.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@archiso /<span class="token punctuation">]</span> <span class="token function">grub-mkconfig</span> -o /boot/grub/grub.cfg  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210127185802484.png"></p></li><li><p>设置密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@archiso /<span class="token punctuation">]</span> <span class="token function">passwd</span> <span class="token comment">#设置root密码  </span><span class="token punctuation">[</span>root@archiso /<span class="token punctuation">]</span> <span class="token function">useradd</span> -m -g <span class="token function">users</span> -s /bin/bash lihong <span class="token comment"># lihong 替换为你的用户名 </span><span class="token punctuation">[</span>root@archiso /<span class="token punctuation">]</span> <span class="token function">passwd</span> lihong <span class="token comment"># 设置lihong密码    </span><span class="token punctuation">[</span>root@archiso /<span class="token punctuation">]</span> pacman -S <span class="token function">sudo</span> <span class="token comment"># 安装sudo </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h1><p>输入exit或使用<kbd> Ctr </kdb>+<kdb> D </kdb> 退出chroot环境    </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@archiso /<span class="token punctuation">]</span> <span class="token function">umount</span> -R /mnt    <span class="token punctuation">[</span>root@archiso /<span class="token punctuation">]</span> <span class="token function">shutdown</span> -h now <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> 取消介质或CD,改为自动检测,启动即可</p><p> 借鉴文档:<a href="https://blog.csdn.net/qq_41605439/article/details/113256605?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-13.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-13.control">优秀的文章</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="archlinux" scheme="http://ershidai.github.io/tags/archlinux/"/>
    
  </entry>
  
  <entry>
    <title>记录sublime注册码失效解决方案</title>
    <link href="http://ershidai.github.io/2021/05/07/%E8%AE%B0%E5%BD%95sublime%E6%B3%A8%E5%86%8C%E7%A0%81%E5%A4%B1%E6%95%88%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://ershidai.github.io/2021/05/07/%E8%AE%B0%E5%BD%95sublime%E6%B3%A8%E5%86%8C%E7%A0%81%E5%A4%B1%E6%95%88%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2021-05-07T04:16:13.000Z</published>
    <updated>2021-05-07T05:30:10.942Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="sublime-text-3-我的生产力"><a href="#sublime-text-3-我的生产力" class="headerlink" title="sublime text 3 我的生产力"></a>sublime text 3 我的生产力</h1><ul><li>sublime对于我来说是仅次于vscode 的存在,但是它的注册码经常莫名的失效,就很烦.以下记录我的解决方案</li><li><ol><li>改host,在最后添加以下内容  <pre class="line-numbers language-text" data-language="text"><code class="language-text">127.0.0.1 license.sublimehq.com127.0.0.1 45.55.255.55127.0.0.1 45.55.41.223<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol></li><li><ol start="2"><li>到sublime里面输入注册码<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">----- BEGIN LICENSE -----Member J2TeaMSingle User LicenseEA7E-1011316D7DA350E 1B8B0760 972F8B60 F3E64036B9B4E234 F356F38F 0AD1E3B7 0E9C5FADFA0A2ABE 25F65BD8 D51458E5 3923CE80<span class="token number">87428428</span> 79079A01 AA69F319 A1AF29A4A684C2DC 0B1583D4 19CBD290 217618CD5653E0A0 BACE3948 BB2EE45E 422D2C87DD9AF44B 99C49590 D2DBDEE1 75860FD28C8BB2AD B2ECE5A4 EFC08AF2 25A9B864------ END LICENSE ------​<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="教程,白嫖" scheme="http://ershidai.github.io/tags/%E6%95%99%E7%A8%8B-%E7%99%BD%E5%AB%96/"/>
    
  </entry>
  
  <entry>
    <title>hexo基本命令记录</title>
    <link href="http://ershidai.github.io/2021/05/01/hexo%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
    <id>http://ershidai.github.io/2021/05/01/hexo%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</id>
    <published>2021-05-01T07:55:13.000Z</published>
    <updated>2021-05-04T08:05:41.697Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="hexo基本命令"><a href="#hexo基本命令" class="headerlink" title="hexo基本命令"></a>hexo基本命令</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo n <span class="token string">"我的博客"</span> <span class="token operator">==</span> hexo new <span class="token string">"我的博客"</span> <span class="token comment">#新建文章</span>hexo g <span class="token operator">==</span> hexo generate <span class="token comment">#生成</span>hexo s <span class="token operator">==</span> hexo server <span class="token comment">#启动服务预览</span>hexo d <span class="token operator">==</span> hexo deploy <span class="token comment">#部署</span>hexo server <span class="token comment">#Hexo会监视文件变动并自动更新，无须重启服务器</span>hexo server -s <span class="token comment">#静态模式</span>hexo server -p <span class="token number">5000</span> <span class="token comment">#更改端口</span>hexo server -i <span class="token number">192.168</span>.1.1 <span class="token comment">#自定义 IP</span>hexo clean <span class="token comment">#清除缓存，若是网页正常情况下可以忽略这条命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>oracle note</title>
    <link href="http://ershidai.github.io/2021/05/01/oraclenote/"/>
    <id>http://ershidai.github.io/2021/05/01/oraclenote/</id>
    <published>2021-05-01T07:32:19.000Z</published>
    <updated>2021-08-14T04:01:51.133Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="oracle-数据库"><a href="#oracle-数据库" class="headerlink" title="oracle 数据库"></a>oracle 数据库</h1><h2 id="1-添加用户到oracle"><a href="#1-添加用户到oracle" class="headerlink" title="1.添加用户到oracle"></a>1.添加用户到oracle</h2><blockquote><p>create user lihong identified by 123;<br>  删除: drop user lihong;</p></blockquote><ul><li><p>添加权限(connect resource dba)</p><blockquote><p>grant 权限 to lihong; </p></blockquote></li><li><p>SQL是用于访问和处理数据库的标准的计算机语言</p></li><li><p>基本数据库对象 (不区分大小写)</p></li><li><p>主码约束primary key,唯一性约束unique,非空约束not null,外键约束foreign key;</p></li><li><p>删除表 DROP table tablename;  </p><blockquote><p>添加列:alter table tablename add ziduan datatype<br>修改列数据类型:alter table cj modify ceshi 数据类型;<br>修改字段名:alter table student rename column sno to id;<br>删除列:alter table cj drop column 字段名;</p></blockquote></li><li><p>增删改查 insert into tablename(ziduan) values(‘’,’’,…);<br>  delete from tablename where 条件;<br>  update tablename set 字段名=’’,字段名=..where…<br>  select 字段 from tablename where…</p></li><li><p>例子: CREATE TABLE<br>student(<br>  Sno CHAER(9) NOT NULL UNIQUE,<br>  Sname CHAR(20) UNIQUE,<br>  Ssex CHAR(20),<br>  Sdept CHAR(20)<br>);</p></li><li><p>限制输出 mysql是limit Oracle是rownum &lt;=<br>select * from presons where rownum &lt;=5;</p></li><li><p>like 通配符 in between…and… </p></li></ul><p>drop table student 删除student表</p><h3 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h3><ul><li>查询 select  单表查询 select * from st</li><li>SELECT DISTINCT Sno from sc; </li><li>where 条件查询 in,not in 确定集合 is NULL ,is not null</li><li>基于文本的过滤 like  % 任意长度字符 _任意单个字符 \转义</li><li>and优先级高于or 括号改变优先级</li><li>降序 DESC,升序 ASC   order by </li><li>select count(ziduan) from student</li><li>分组 GROUP BY  例子: SELECT cno,CONUT(Sorce) from stuents GROUP BY Cno;</li><li>HAVING作用于组中选出条件<h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3></li><li>等值连接(连接运算符为=)<br>  select student.<em>,sc.</em> from student, sc where student.Sno = sc.sno;</li><li>自然连接(没有重复列的自然连接)<br>  select student.Sno, Sname, ssex,Sage,Sdept,Cno,Grade from  student,Sc where Student.Sno=SC.Sno;</li><li>非等值连接(连接运算符不是=)  </li><li>自身连接(需要给表起别名以示区别)<br>  select first.Cno,second.Cpno from Course first, Course second where first.cpno=second.cno;</li><li>外连接(左连接,通常就用join on )<br>  select student.Sno, Sname,Ssex,Sage,Cno,Grade from student left join sc on student.sno=sc.sno;</li><li>复合条件连接<br>  select student.Sno,student.Sname<br>  form student,Sc where student.sno=Sc.sno and sc.cno=’2’ and sc.Grade&gt;90;</li><li>多表连接<br>  select student.Sno,Sname,Grade rom student,Sc,Course where student.Sno=SC.sno and Sc.Cno=Course.Cno;</li></ul><h3 id="嵌套查询-子查询-将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询"><a href="#嵌套查询-子查询-将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询" class="headerlink" title="嵌套查询(子查询){将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询}"></a>嵌套查询(子查询){将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询}</h3><ul><li>select Sname from student where Sno in (select sno from sc where cno=’2’);</li></ul><h3 id="集合查询"><a href="#集合查询" class="headerlink" title="集合查询"></a>集合查询</h3><ul><li>union 并(相当于or)</li><li>intersect 交(相当于and)</li><li>minus 差 (相当于前者与后者的补集的交)</li></ul><p>任何情况 order by 只能出现在最后</p><h3 id="分组与视图-索引"><a href="#分组与视图-索引" class="headerlink" title="分组与视图,索引"></a>分组与视图,索引</h3><ul><li>提高效率的2方法:索引,分区<br>1 分组 (group by)</li><li>目的:可用聚合函数 like: select kid,count(id) from cj group by kid having count(id)&gt;=’3’;</li><li>having(相当于where)</li></ul><p>2 视图</p><ul><li>创建视图: create view view_nam as<br>select column_name from table_name<br>where condition<blockquote><p>create view view1 as select sno,cj.id,kc.kname from student2,cj,kc where id &gt;1;(这要表连接)</p></blockquote></li><li>开头可加个 or replace</li><li>更新视图: update view_nam set sname=’liucheng’ where sno=’12’<br>同基本表的更删改查</li></ul><p>3 索引</p><ul><li>创建唯一性索引:create unique index stusno on student(sno);</li><li>聚簇索引:create cluster index stusname on student(sname);</li><li>drop index stusname;</li></ul><h3 id="存储过程-procedure"><a href="#存储过程-procedure" class="headerlink" title="存储过程(procedure)"></a>存储过程(procedure)</h3><ul><li>语法结构:<pre><code class="sql">  create or replace   procedure 过程名 as 声明语句段;  begin 执行语句段,  exception 异常处理语句段;  end;</code></pre></li><li>流程控制</li></ul><ol><li>条件判断<blockquote><p>if … then elsif then … else …end if;<br>case … when … than …end;  </p></blockquote></li><li>循环结构<blockquote><p>loop … exit when … end loop;<br>while … loop … end loop;<br>for i in … loop … end loop;<br>goto,exit  </p></blockquote></li></ol><ul><li>游标(cursor) 是用于处理多行的句柄或指针</li></ul><ol><li>定义游标<blockquote><p>cursor cursor_name is select id from student where …;</p></blockquote></li><li>打开游标<blockquote><p>open cursor_name;</p></blockquote></li><li>提取游标<blockquote><p>fetch cursor_name into 变量里;<br>while cursor_name%found loop<br> dbms_output.put_line(‘xuhao:’||变量);<br>  fetch cursor_name into 变量里;<br>end loop</p></blockquote></li><li>关闭游标<br>close cursor_name;<br>用for 就不需要后三🙅‍步</li></ol><ul><li><p>声明一个记录类型<br>type name is record( 里面放多个变量)</p></li><li><p>游标属性</p></li></ul><ol><li>%found 布尔型属性,当最近一次读时成功返回即为true</li><li>%notfound</li><li>%isopen 当游标打开时返回true</li><li>%rowcount 数字型属性 返回已从游标中读取的记录数  </li></ol><ul><li> 带参数的游标<blockquote><p>cursor cursor_name(id number, name varchar) is<br>select id,sname from xuesheng where …</p></blockquote></li><li>隐性游标<blockquote><p>begin<br>  update employees set salary = salary+10;<br>  where employee_id = 101;<br>  if sql%notfound then dbms_output.put_line(‘查无此人’);<br>  end if;<br>end;</p></blockquote></li></ul><ul><li>创建函数(function)<blockquote><p>create or replace function func_name(id number,name varchar)<br>return number<br>is  –定义的,声明的变量,记录类型,游标;<br>begin<br>  –函数的执行体<br>exception<br>  –处理函数的异常<br>end;</p></blockquote></li></ul><ol><li>调用函数 select func_name from dual;</li></ol><h3 id="触发器-trigger-通过某一个事件来隐性运行"><a href="#触发器-trigger-通过某一个事件来隐性运行" class="headerlink" title="触发器(trigger) 通过某一个事件来隐性运行"></a>触发器(trigger) 通过某一个事件来隐性运行</h3><blockquote><p>create or replace trigger update_emp<br>after<br>update on emloyees<br>begin<br>    执行体<br>end;</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="数据库笔记,学习" scheme="http://ershidai.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫模块</title>
    <link href="http://ershidai.github.io/2021/04/06/python%E7%88%AC%E8%99%AB%E6%A8%A1%E5%9D%97/"/>
    <id>http://ershidai.github.io/2021/04/06/python%E7%88%AC%E8%99%AB%E6%A8%A1%E5%9D%97/</id>
    <published>2021-04-06T02:28:05.000Z</published>
    <updated>2021-08-12T13:40:50.070Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Python-爬虫训练"><a href="#Python-爬虫训练" class="headerlink" title="Python 爬虫训练"></a>Python 爬虫训练</h1><h2 id="一、基本爬虫三段式"><a href="#一、基本爬虫三段式" class="headerlink" title="一、基本爬虫三段式"></a>一、基本爬虫三段式</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsresponse <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://baidu.com'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src=""><br>即可打印来自<a href="https://www.baidu.com/">baidu</a>的前端代码</p><h2 id="二、爬虫的数据清洗"><a href="#二、爬虫的数据清洗" class="headerlink" title="二、爬虫的数据清洗"></a>二、爬虫的数据清洗</h2><h3 id="1-xpath"><a href="#1-xpath" class="headerlink" title="1.xpath"></a>1.xpath</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreeurl <span class="token operator">=</span> <span class="token string">'https://baidu.com'</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token comment">#将源代码转化成网页结构</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment">#在通过xpath来选择数据</span>data_info<span class="token operator">=</span>html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[2]/div[3]/div/div[2]/div[4]/div[1]/div[1]/a/p[1]/span[1]'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data_info<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-正则表达式（-）"><a href="#2-正则表达式（-）" class="headerlink" title="2.正则表达式（.*?）"></a>2.正则表达式（.*?）</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> redata <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'fdasfagagawe'</span><span class="token punctuation">&#125;</span>a <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'[a-z]'</span><span class="token punctuation">,</span>data<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-BeautifulSoup-CSS选择器"><a href="#3-BeautifulSoup-CSS选择器" class="headerlink" title="3.BeautifulSoup+CSS选择器"></a>3.BeautifulSoup+CSS选择器</h3><h4 id="1-四大类型："><a href="#1-四大类型：" class="headerlink" title="1.四大类型："></a>1.四大类型：</h4><ol><li><p>navigableString 文本类型</p></li><li><p>comment  注释</p></li><li><p>BeautifulSoup </p></li><li><p>文档数 –子节点</p><p>soup.head.children# 迭代器 也是一个对象</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> requests<span class="token keyword">import</span> jsonurl <span class="token operator">=</span> <span class="token string">'https://www.baidu.com'</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf8'</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>head<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token comment">#打印的是一个对象</span><span class="token comment">#要想打印出来必须迭代出来，也就是一条一条输出</span><span class="token keyword">for</span> child <span class="token keyword">in</span> soup<span class="token punctuation">.</span>head<span class="token punctuation">.</span>children<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token comment">#将他的子孙节点都迭代出来</span><span class="token keyword">for</span> child <span class="token keyword">in</span> soup<span class="token punctuation">.</span>descendants<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token comment">#父节点 .parents 可迭代当前标签的所有父节点</span><span class="token keyword">for</span> parent <span class="token keyword">in</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>parents<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token comment">#兄弟节点 .next_sibling 获取下一个兄弟 .prev_sibling 获取上一个兄弟</span><span class="token comment">#前后节点 .next_element .previous_element</span><span class="token comment">#可以加s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="2-css选择器"><a href="#2-css选择器" class="headerlink" title="2.css选择器"></a>2.css选择器</h4><p>div.class#id 多层就空格</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div.hl-main span'</span><span class="token punctuation">)</span><span class="token comment">#跟select_one一样，只一次</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment">#找出所有a标签</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'div.hl-main span'</span><span class="token punctuation">)</span><span class="token comment">#等同find_all</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="python学习" scheme="http://ershidai.github.io/tags/python%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
