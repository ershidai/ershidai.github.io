{"meta":{"title":"游城二十代","subtitle":"那可不一定","description":"记录coding,生活分享,个人笔记","author":"二十代","url":"http://ershidai.github.io","root":"/"},"pages":[{"title":"关于","date":"2021-02-13T08:04:48.000Z","updated":"2021-08-18T12:52:40.524Z","comments":false,"path":"about/index.html","permalink":"http://ershidai.github.io/about/index.html","excerpt":"","text":"欢迎来到我的小站呀，很高兴遇见你！🤝 🏠 关于本站 这里是123leehom的第一个网站,欢迎光临 力宏驿站 👨‍💻 博主是谁 二刺猿,爱好数码(我才不告诉你我家境贫寒) 计算机科学与技术专业的技术小白 定位湖北武汉的123leehom ⛹ 兴趣爱好 宏亲,miki,提莫蘑菇粉 敲代码,爱玩黑神话-悟空 姬丝秀忒.雅赛劳拉莉昂.刃下心 📬 联系我呀 电子邮箱:&#x6c;&#101;&#101;&#104;&#111;&#109;&#120;&#x75;&#x37;&#x36;&#64;&#103;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#111;&#109;"},{"title":"归档","date":"2021-08-18T12:50:47.000Z","updated":"2021-12-04T13:32:23.356Z","comments":true,"path":"archives/index.html","permalink":"http://ershidai.github.io/archives/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-08-16T10:25:21.000Z","updated":"2021-12-04T13:25:17.355Z","comments":true,"path":"categories/index.html","permalink":"http://ershidai.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-04-05T11:07:18.000Z","updated":"2021-12-04T16:08:13.912Z","comments":true,"path":"link/index.html","permalink":"http://ershidai.github.io/link/index.html","excerpt":"","text":""},{"title":"统计","date":"2021-08-17T11:17:14.000Z","updated":"2021-08-18T13:13:30.122Z","comments":true,"path":"charts/index.html","permalink":"http://ershidai.github.io/charts/index.html","excerpt":"","text":""},{"title":"留言板","date":"2021-08-16T10:25:37.000Z","updated":"2021-08-19T13:50:35.768Z","comments":true,"path":"messageboard/index.html","permalink":"http://ershidai.github.io/messageboard/index.html","excerpt":"","text":""},{"title":"movies","date":"2021-09-07T05:30:31.000Z","updated":"2021-12-04T13:27:13.685Z","comments":true,"path":"movies/index.html","permalink":"http://ershidai.github.io/movies/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-04-05T10:52:58.000Z","updated":"2021-12-04T13:28:12.155Z","comments":true,"path":"tags/index.html","permalink":"http://ershidai.github.io/tags/index.html","excerpt":"","text":""},{"title":"photos","date":"2021-09-07T05:30:20.000Z","updated":"2021-12-04T15:57:19.603Z","comments":true,"path":"photos/index.html","permalink":"http://ershidai.github.io/photos/index.html","excerpt":"","text":"myicon useful icon Y-G-O ygo main card tu_ch funy box"},{"title":"pictures","date":"2021-09-07T05:30:20.000Z","updated":"2021-12-04T16:07:16.753Z","comments":true,"path":"photos/pictures/index.html","permalink":"http://ershidai.github.io/photos/pictures/index.html","excerpt":"","text":""},{"title":"日志","date":"2021-08-19T09:27:38.000Z","updated":"2021-12-04T13:28:34.700Z","comments":false,"path":"timeline/index.html","permalink":"http://ershidai.github.io/timeline/index.html","excerpt":"","text":"2021-08-19 完成博客初步搭建，hexo + butterfly 搭建 实现页面半透明 2021-12-04 Happy Birthday to me learning a new code language called golang"},{"title":"icons","date":"2021-09-07T05:30:20.000Z","updated":"2021-10-01T14:05:31.860Z","comments":true,"path":"photos/ygo/index.html","permalink":"http://ershidai.github.io/photos/ygo/index.html","excerpt":"","text":""},{"title":"icons","date":"2021-09-07T05:30:20.000Z","updated":"2021-10-01T14:04:26.553Z","comments":true,"path":"photos/icons/index.html","permalink":"http://ershidai.github.io/photos/icons/index.html","excerpt":"","text":""}],"posts":[{"title":"天地龙鳞lrc","slug":"天地龙鳞lrc","date":"2021-12-04T10:06:19.000Z","updated":"2021-12-04T16:47:06.603Z","comments":true,"path":"article/3a6f9f4c.html","link":"","permalink":"http://ershidai.github.io/article/3a6f9f4c.html","excerpt":"","text":"天地龙鳞 lrc[ar:王力宏][ti:天地龙鳞][by:p_pttzhang][00:00.0]天地龙鳞 (《紫禁城》大型纪录片主题歌) - 王力宏[00:00.567]词：方文山[00:00.675]曲：王力宏[00:00.783]编曲：唐达[00:00.891]制作人：王力宏[00:01.53]录音：王力宏[00:01.188]混音：Mick Guzauski[00:01.296]录音室：西东音乐 北京[00:01.539]混音室：宏声音乐 台北[00:01.782]特别鸣谢：西东音乐（王力宏工作室）[00:18.833]这江山我起笔 民族血脉又几万里[00:26.451]几世纪六百年里[00:30.269]龙的传人历经风雨[00:33.878]这京畿中轴地 一如君子气节不移[00:41.484]九龙壁瓦上琉璃[00:45.140]历史从这衰落又崛起[00:48.969]这龙鳞却曾经 铿锵落地犹如碎冰[00:56.433]一片鳞一寸心 故事飘摇我不忍听[01:03.967]人守礼心守静 悠扬古琴弹君子心[01:11.382]我清醒等回音 盘旋泱泱华夏文明[01:20.917]敬过去我落笔 东方辽阔的黄土地[01:28.276]山水里泼墨抹去[01:31.950]只见嶙峋华夏骨气[01:35.793]紫禁城神武门[01:39.587]多少沧桑铸造中华魂[01:43.305]我继承文化深耕[01:47.8]突破变局去扭转乾坤[01:52.698]这龙鳞却曾经 铿锵落地犹如碎冰[02:00.129]一片鳞一寸心 以小成其大我坚信[02:07.694]将民族的命运 昂首抬起再次复兴[02:15.112]游天地寻龙鳞 龙的血脉蔚然成林[02:37.714]这龙鳞却曾经 铿锵落地犹如碎冰[02:45.188]一片鳞一寸心 故事飘摇我不忍听[02:52.661]将民族的命运 昂首抬起再次复兴[03:00.136]游天地寻龙鳞 龙的血脉蔚然成林","categories":[{"name":"enjoy","slug":"enjoy","permalink":"http://ershidai.github.io/categories/enjoy/"}],"tags":[{"name":"songer","slug":"songer","permalink":"http://ershidai.github.io/tags/songer/"}]},{"title":"docker笔记","slug":"docker笔记","date":"2021-12-04T06:55:41.000Z","updated":"2021-12-04T16:40:37.801Z","comments":true,"path":"article/4417b09c.html","link":"","permalink":"http://ershidai.github.io/article/4417b09c.html","excerpt":"","text":"docker学习笔记安装docker 参照[官方文档](Install Docker Engine | Docker Documentation)部署 Docker 的用途 一次编译，多次执行 提供弹性云服务，随开随关 组建微服务，一台机器跑多个服务 Docker 命令需要注意的是，docker需要用户具有sudo 权限，为了避免麻烦，可以加入docker用户组 sudo groupadd docker sudo usermod -aG docker $USER 验证docker安装成功 可以 docker version docker imge 文件image是二进制文件，docker把程序和依赖打包为镜像，之后生成Docker 容器，image 文件是容器的模板 docker env # 查看docker的环境配置 docker image ls # 列出所有 image 文件，可简写为 docker images docker pull centos # 获取 centos 镜像 docker image rm [imageName] 而image 的pull 都是从doker hub上获取的，用户可自行上传，同github docker container 文件container 容器，镜像的第二阶段，大部分的操作是在容器上 docker container ls docker container ls --all #包括终止运行的容器 docker container run -it centos:latest /bin/bash # 启动这个容器的基本命令 # -it 参数是让命令行运行，/bin/bash 是指定shell # 可加 -d 参数 处于后台运行 docker container rm [containerID] docker container kill [containerID] docker ps -a # 查看运行容器 DockerfileDockerfile 类比 shell脚本，是制作docker容器的脚本，在项目的根目录touch .dockerignore ,里面可以添加你不想打包到 image 中的文件 .git node_modules npm-debug.log touch Dockerfile FROM node:8.4 #指定image COPY . ./app #拷贝项目到app路径 WORKDIR /app RUN npm install --registry=https://registry.npm.taobao.org #安装依赖 EXPOSE 3000 #容器端口 创建 image file docker image build -t name . #-t指定name . 为Dockfile路径 image 建好后，可以生成容器, docker container run -p 8000:3000 -it name /bin/bash # -p 3000端口映射到本地8000端口 发布 image 文件可以在 docker 官网 注册 一个账户发布你的 image docker login docker image tag [imagename] [username]/[repository]:[tag] # 为本地 image 标注用户名和版本 docker image push [username]/[repository]:[tag] # 推送 归纳一个容器名为lihong的centos image # 启动，停止，重启容器： docker start container_name/container_id docker stop ~ docker restart ~ 例子：用于flask开发的python 环境 docker run -it centos:latest /bin/bash 在容器中，安装python3,git,flash等依赖包，exit docker commit -m \"flask\" -a 'lihong' container_id lihong/flask:v1 docker push lihong/flask:v1","categories":[{"name":"虚拟化","slug":"虚拟化","permalink":"http://ershidai.github.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://ershidai.github.io/tags/docker/"}]},{"title":"golang笔记","slug":"golang笔记","date":"2021-12-04T06:54:59.000Z","updated":"2021-12-04T16:52:32.047Z","comments":true,"path":"article/1d6afd5.html","link":"","permalink":"http://ershidai.github.io/article/1d6afd5.html","excerpt":"","text":"Golang25 个关键字break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import return var 37个保留字Constants: true false iota nil Types: int int8 int16 int32 int64 uint uint8 uint16 uint32 uint64 uintptr float32 float64 complex128 complex64 bool byte rune string error functions: make len cap new append copy close delete complex real imag panic recover 声明var a int const PI 3.1415 type func 目录结构 src ：源码文件 项目路径 bin：二进制编译文件 pkg：包文件 内置类型 值类型 bool,string,array,int,uint…. 引用类型 slice –序列数组 map – 映射 chan – 管道，信道 内置函数 append -- 用来追加元素到数组、slice中,返回修改后的数组、slice close -- 主要用来关闭channel 用法：chan.close() delete -- 从map中删除key对应的value panic -- 停止常规的goroutine （panic和recover：用来做错误处理） recover -- 允许程序定义goroutine的panic动作 real -- 返回complex的实部 （complex、real imag：用于创建和操作复数） imag -- 返回complex的虚部 make -- 用来分配内存，返回Type本身(只能应用于slice, map, channel) new -- 用来分配内存，主要用来分配值类型，比如int、struct。返回指向Type的指针 cap -- capacity是容量的意思，用于返回某个类型的最大容量（只能用于切片和 map） copy -- 用于复制和连接slice，返回复制的数目 len -- 来求长度，比如string、array、slice、map、channel ，返回长度 print、println -- 底层打印函数，在部署环境中建议使用 fmt 包 内置接口errortype error interface &#123; //只要实现了Error()函数，返回值为String的都实现了err接口 Error() String &#125; init函数与main的异同相同点： 两个函数在定义时不能有任何的参数和返回值，且Go程序自动调用。 不同点： init可以应用于任意包中，且可以重复定义多个。 main函数只能用于main包中，且只能定义一个。 go的命令 go env用于打印Go语言的环境信息。 go run命令可以编译并运行命令源码文件。 go get可以根据要求和实际情况从互联网上下载或更新指定的代码包及其依赖包，并对它们进行编译和安装。 go build命令用于编译我们指定的源码文件或代码包以及它们的依赖包。 go install用于编译并安装指定的代码包及它们的依赖包。 go clean命令会删除掉执行其它命令时产生的一些文件和目录。 go doc命令可以打印附于Go语言程序实体上的文档。我们可以通过把程序实体的标识符作为该命令的参数来达到查看其文档的目的。 go test命令用于对Go语言编写的程序进行测试。 go list命令的作用是列出指定的代码包的信息。 go fix会把指定代码包的所有Go语言源码文件中的旧版本代码修正为新版本的代码。 go vet是一个用于检查Go语言源码中静态错误的简单工具。 go tool pprof命令来交互式的访问概要文件的内容。","categories":[{"name":"coding","slug":"coding","permalink":"http://ershidai.github.io/categories/coding/"}],"tags":[{"name":"golang","slug":"golang","permalink":"http://ershidai.github.io/tags/golang/"}]},{"title":"ranger的使用","slug":"ranger的使用","date":"2021-08-17T10:42:08.000Z","updated":"2021-12-04T16:45:11.096Z","comments":true,"path":"article/ce6bd9d5.html","link":"","permalink":"http://ershidai.github.io/article/ce6bd9d5.html","excerpt":"","text":"ranger的使用一个基于python语言，vim的操作方式的linux终端程序 安装 在arch中安装 sudo pacman -S --noconfirm ranger 可能需要的依赖 suo pacman -S --noconfirm libcaca hightlight atool lynx w3m elinks mediainfo 配置ranger --copy-config-all #生成默认配置文件 commands.py ：与以下命令一起启动的命令 commands_full.py: 全套命令 rc.conf: 主要配置和绑定 rifile.conf: 文件关联 scopen.sh: 各种文件预览 这里我们处理rc.conf 图片预览修改rc.conf set preview_images false #改成true set preview_images_method w3m 配置环境变量在环境变量vim ~/.zshrc增加下面一行 export RANGER_LOAD_DEFAULT_RC=FALSE 显示边框set draw_borders true 显示行号set line_numbers relative set one_indexde true #默认从0开始，这里改为1 设置低预览set preview_max_size 5120000 #预览5MB以下的文件 无预览时不折叠set collapse_preview false 常用操作大部分与vim相同 快捷键 说明 yy 复制 dd 剪切 pp 粘贴 cw 重命名 a 重命名 q 退出 Q 全部退出 v 全选 V 选择模式 gh cd ~ ge cd /etc gu cd /usr gd cd /dev gl cd -r . gL cd -r %f go cd /opt gv cd /var gm cd /media 参考文章：终端中的文件管理器ranger【视频】_lxyoucan的博客-CSDN博客","categories":[{"name":"linux","slug":"linux","permalink":"http://ershidai.github.io/categories/linux/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://ershidai.github.io/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"python-method","slug":"python-method","date":"2021-08-12T12:59:23.000Z","updated":"2021-12-04T16:44:15.302Z","comments":true,"path":"article/8382.html","link":"","permalink":"http://ershidai.github.io/article/8382.html","excerpt":"","text":"pip 下载速度添加豆瓣源可提高pip下载速率pip 豆瓣源地址： -i https://pypi.doubanio.com/simple/ –trusted-host pypi.doubanio.com 目标名例：pip install -i https://pypi.doubanio.com/simple/ –trusted-host pypi.doubanio.com Django Python中的基本method字符串(str)方法： count() 返回个数 find() 返回这个字符所在索引 split() 分割字符 #这个可以用来字符串转列表 splitline() 以换行符分割 join() 与split()对立 连接字符，#’|’.join([‘1’,’2’,’3’]) strip() 删除两边空格 Istrip() 删除左边空格 rstrip() 删除右边空格 用的不多 更多用替换 replace(‘’,’’) replace(‘old’,’new’) 替换所有指定字符 startswith() 是否以参数开头 返回布尔值 endswith() 是否以参数结尾 isdigit() 是否全都是数字构成 返回布尔值 字符串倒序：str1 = ‘ ‘ R=str1[::-1] print(R) printf风格 %s 占位符 %d 整数占位 %f 浮点占位print(‘I love you,%s,you are my %s’%(name,shabi)) f-string 格式化print(f’I love you,{name},you are my {shabi}’) 指定宽度，小数点 {name:&lt;8} 占8个字符并左对齐 {shabi:&lt;8.1f} .1f表示保留一位小数 print(r’’) r表示不需转义字符 列表(list)方法： .append() 在后面添加元素 返回None .insert(索引，内容) 插入元素 返回None .pop(索引) 删除元素 返回值 是 提取出来的元素 .remove(值) 按值删除，最多只删除一个 返回None .reverse() 颠倒顺序 返回None .index(值) 返回索引 .sort() 排序 返回None 字典(dict)方法：遍历字典 .items() 将字典存在一个列表中，是个列表 for account,level in members.items(): print(f'account:&#123;account&#125;,level:&#123;level&#125;') members.keys() 返回所有key值在列表里 members.values() 返回所有values值在列表里 清空字典所有元素：.clear() 合并字典：.update(another) #another会覆盖掉原来的字典 转换method字符串转字典,列表:eval() #eval()可以去掉外层的” “ 列表转字典:dict() 其他转字符串:str()","categories":[{"name":"coding","slug":"coding","permalink":"http://ershidai.github.io/categories/coding/"}],"tags":[{"name":"python","slug":"python","permalink":"http://ershidai.github.io/tags/python/"}]},{"title":"git学习记录","slug":"git学习记录","date":"2021-08-12T12:53:53.000Z","updated":"2021-12-04T16:41:58.777Z","comments":true,"path":"article/56902.html","link":"","permalink":"http://ershidai.github.io/article/56902.html","excerpt":"","text":"git learn:显示当前的Git配置 $ git config --list 编辑Git配置文件$ git config -e [--global] 设置提交代码时的用户信息$ git config [--global] user.name \"[name]\" $ git config [--global] user.email \"[email address]\" 增加/删除文件查看分支：git branch 创建分支：git branch name 切换分支：git checkout name 创建+切换分支：git checkout –b name 合并某分支到当前分支：git merge name 删除分支：git branch –d name 上传到远程库:git remote add origin https://github.com/123leehom/xulihong-rep.git git push -u origin master(fork)","categories":[{"name":"github","slug":"github","permalink":"http://ershidai.github.io/categories/github/"}],"tags":[{"name":"分布式版本控制","slug":"分布式版本控制","permalink":"http://ershidai.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"}]},{"title":"vim的使用记录","slug":"vim的使用记录","date":"2021-08-12T12:53:32.000Z","updated":"2021-12-04T16:45:29.238Z","comments":true,"path":"article/6075.html","link":"","permalink":"http://ershidai.github.io/article/6075.html","excerpt":"","text":"插入模式 i 进入插入模式 a 进入添加模式 即在当前光标下一个位置插入字符 o 在当前行下一行插入字符 O 在当前行上一行插入字符 x 删除当前光标下的字符 I 在行首进入插入模式 A 在行尾进入插入模式 normal 模式 hjkl 左下上右 指令+方向+动作 d | 数量加方向 | 向那个方向删除数量个字符 dd 剪切整行 w 向下移动一个词word b 向上移动一个词back ciw change in word 删除一个word并进入插入模式#c会进入插入而d不会 ci” 删掉””里的字符 f find p 粘贴 y 复制 G 移到最后 gg 移到第一行首 可视化模式 v 进入该模式 V 进入该模式的行 ctr+shift+v 进入该模式的块 选中后,按:normal 可执行普通模式命令 番外之cmd编码 chcp #查看当前cmd的编码格式 chcp 65001 #换成utf-8代码页 chcp 936 #换成默认的gbk chcp 437 #美国英语","categories":[{"name":"linux","slug":"linux","permalink":"http://ershidai.github.io/categories/linux/"}],"tags":[{"name":"vim","slug":"vim","permalink":"http://ershidai.github.io/tags/vim/"}]},{"title":"matplotlib","slug":"matplotlib","date":"2021-08-12T12:52:55.000Z","updated":"2021-12-04T16:43:19.282Z","comments":true,"path":"article/63465.html","link":"","permalink":"http://ershidai.github.io/article/63465.html","excerpt":"","text":"一、导入模块import matplotlib.pyplot as plt 二、bar（）柱状图import marplotlib.pyplot as plt name = [1,2,3,4] values = [23,24,53,53] plt.bar(name,values)#参数是列表类型，数量要对应 plt.xlabel('x轴标题') plt.ylabel('y轴标题') plt.show() 三、scatter（）点状图import ... x=[1,2,3] y=[4,5,6] plt.scatter(x,y,s=10)#s表示点的大小 plt.show()","categories":[{"name":"科学计算","slug":"科学计算","permalink":"http://ershidai.github.io/categories/%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/"}],"tags":[{"name":"python","slug":"python","permalink":"http://ershidai.github.io/tags/python/"}]},{"title":"archlinux安装记录","slug":"archlinux配置","date":"2021-08-07T08:01:14.000Z","updated":"2021-12-04T16:39:49.932Z","comments":true,"path":"article/39443.html","link":"","permalink":"http://ershidai.github.io/article/39443.html","excerpt":"","text":"记录安装Archlinux裸机过程配置虚拟机的注意事项 虚拟机设置EFI引导 检查方法:root@archiso ~ ls /sys/firmware/efi/efivars 如果路径下有文件夹的话就是EFI配置网络服务root@archiso ~ ip a # 查看网络ip 如果没有网络的话,请执行下面的步骤,有无网络的检查方法: ping qq.comroot@archiso ~ dhcpcd 自动分配ip 修改镜像源root@archiso ~ vim /etc/pacman.d/mirrorlist 阿里源: http://mirrors.163.com/archlinux/$repo/os/$arch 分区 查看分区: root@archiso ~ fdisk -l 使用图形化分区 root@archiso ~ cfdisk /dev/sda 弹出来的第一个界面选第一个分好后: 查看分好后的分区 root@archiso ~ lsblk 格式化分区 root@archiso ~ mkfs.fat -F32 /dev/sda1 # 将 sda1 格式化为FAT32格式 root@archiso ~ mkfs.ext4 /dev/sda3 # 将 根分区 格式化为ext4格式 root@archiso ~ mkswap /dev/sda2 -L Swap # 设置并开启Swap分区 root@archiso ~ swapon /dev/sda2 挂载分区 root@archiso ~ mount /dev/sda3 /mnt root@archiso ~ mkdir -p /mnt/boot/EFI root@archiso ~ mount /dev/sda1 /mnt/boot/EFI 安装基本系统 root@archiso ~ pacstrap /mnt base linux linux-firmware vim networkmanager root@archiso ~ genfstab -U /mnt >> /mnt/etc/fstab # 生成fstab文件 root@archiso ~ cat /mnt/etc/fstab 进入系统 root@archiso ~ arch-chroot /mnt [root@archiso /] mkinitcpio -P linux # 重新生成ramdisk环境 设置时区 [root@archiso /] ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime [root@archiso /] hwclock --systohc --utc #调整时间漂移并设置时间标准为UTC 配置地区语言信息 [root@archiso /] vim /etc/locale.gen 将en_US.UTF-8 UTF-8 取消注释即可 :x 保存退出 [root@archiso /] locale-gen # 使之生效 [root@archiso /] locale -a # 列出所有启用的locale [root@archiso /] echo LANG=en_US.UTF-8 > /etc/locale.conf [root@archiso /]locale 创建hostname 文件 [root@archiso /] hostnamectl set-hostname arch-pc # arch-pc 是你的主机名,自行替换 [root@archiso /] hostnamectl status 设置主机名并配置系统网络 [root@archiso /] echo arch-pc > /etc/hostname [root@archiso /] vim /etc/hosts 编辑如下: 127.0.0.1 localhost ::1 localhost 127.0.1.1 arch-pc.localdomain arch-pc # 记得替换你的主机名 [root@archiso /] pacman -S dhcpcd [root@archiso /] systemctl enable dhcpcd #设置为自动启动 [root@archiso /]pacman -S networkmanager nm-connection-editor network-manager-applist rp-pppoe [root@archiso /] systemctl enable NetworkManager 引导系统 [root@archiso /] mkinitcpio -P #初始化文件系统 注意这里P是大写 [root@archiso /] pacman -S dosfstools grub efibootmgr #这里是关键 [root@archiso /] grub-install --target=x86_64-efi --efi-directory=/boot/EFI --recheck [root@archiso /] grub-mkconfig -o /boot/grub/grub.cfg 设置密码 [root@archiso /] passwd #设置root密码 [root@archiso /] useradd -m -g users -s /bin/bash lihong # lihong 替换为你的用户名 [root@archiso /] passwd lihong # 设置lihong密码 [root@archiso /] pacman -S sudo # 安装sudo 重启输入exit或使用 Ctr + D 退出chroot环境 [root@archiso /] umount -R /mnt [root@archiso /] shutdown -h now 取消介质或CD,改为自动检测,启动即可 借鉴文档:优秀的文章","categories":[{"name":"linux","slug":"linux","permalink":"http://ershidai.github.io/categories/linux/"}],"tags":[{"name":"archlinux","slug":"archlinux","permalink":"http://ershidai.github.io/tags/archlinux/"}]},{"title":"记录sublime注册码失效解决方案","slug":"记录sublime注册码失效解决方案","date":"2021-05-07T04:16:13.000Z","updated":"2021-12-04T16:46:00.403Z","comments":true,"path":"article/54826.html","link":"","permalink":"http://ershidai.github.io/article/54826.html","excerpt":"","text":"sublime text 3 我的生产力 sublime对于我来说是仅次于vscode 的存在,但是它的注册码经常莫名的失效,就很烦.以下记录我的解决方案 改host,在最后添加以下内容 127.0.0.1 license.sublimehq.com 127.0.0.1 45.55.255.55 127.0.0.1 45.55.41.223 到sublime里面输入注册码----- BEGIN LICENSE ----- Member J2TeaM Single User License EA7E-1011316 D7DA350E 1B8B0760 972F8B60 F3E64036 B9B4E234 F356F38F 0AD1E3B7 0E9C5FAD FA0A2ABE 25F65BD8 D51458E5 3923CE80 87428428 79079A01 AA69F319 A1AF29A4 A684C2DC 0B1583D4 19CBD290 217618CD 5653E0A0 BACE3948 BB2EE45E 422D2C87 DD9AF44B 99C49590 D2DBDEE1 75860FD2 8C8BB2AD B2ECE5A4 EFC08AF2 25A9B864 ------ END LICENSE ------","categories":[{"name":"技巧","slug":"技巧","permalink":"http://ershidai.github.io/categories/%E6%8A%80%E5%B7%A7/"}],"tags":[{"name":"sublime test 3","slug":"sublime-test-3","permalink":"http://ershidai.github.io/tags/sublime-test-3/"}]},{"title":"hexo基本命令记录","slug":"hexo基本命令记录","date":"2021-05-01T07:55:13.000Z","updated":"2021-12-04T16:42:56.612Z","comments":true,"path":"article/18843.html","link":"","permalink":"http://ershidai.github.io/article/18843.html","excerpt":"","text":"hexo基本命令hexo n \"我的博客\" == hexo new \"我的博客\" #新建文章 hexo n page \"新菜单\" hexo g == hexo generate #生成 hexo s == hexo server #启动服务预览 hexo d == hexo deploy #部署 hexo server #Hexo会监视文件变动并自动更新，无须重启服务器 hexo server -s #静态模式 hexo server -p 5000 #更改端口 hexo server -i 192.168.1.1 #自定义 IP hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令","categories":[{"name":"网站建设","slug":"网站建设","permalink":"http://ershidai.github.io/categories/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://ershidai.github.io/tags/hexo/"}]},{"title":"oracle note","slug":"oraclenote","date":"2021-05-01T07:32:19.000Z","updated":"2021-12-04T16:43:53.032Z","comments":true,"path":"article/45409.html","link":"","permalink":"http://ershidai.github.io/article/45409.html","excerpt":"","text":"oracle 数据库1.添加用户到oracle create user lihong identified by 123; 删除: drop user lihong; 添加权限(connect resource dba) grant 权限 to lihong; SQL是用于访问和处理数据库的标准的计算机语言 基本数据库对象 (不区分大小写) 主码约束primary key,唯一性约束unique,非空约束not null,外键约束foreign key; 删除表 DROP table tablename; 添加列:alter table tablename add ziduan datatype修改列数据类型:alter table cj modify ceshi 数据类型;修改字段名:alter table student rename column sno to id;删除列:alter table cj drop column 字段名; 增删改查 insert into tablename(ziduan) values(‘’,’’,…); delete from tablename where 条件; update tablename set 字段名=’’,字段名=..where… select 字段 from tablename where… 例子: CREATE TABLEstudent( Sno CHAER(9) NOT NULL UNIQUE, Sname CHAR(20) UNIQUE, Ssex CHAR(20), Sdept CHAR(20)); 限制输出 mysql是limit Oracle是rownum &lt;=select * from presons where rownum &lt;=5; like 通配符 in between…and… drop table student 删除student表 数据查询 查询 select 单表查询 select * from st SELECT DISTINCT Sno from sc; where 条件查询 in,not in 确定集合 is NULL ,is not null 基于文本的过滤 like % 任意长度字符 _任意单个字符 \\转义 and优先级高于or 括号改变优先级 降序 DESC,升序 ASC order by select count(ziduan) from student 分组 GROUP BY 例子: SELECT cno,CONUT(Sorce) from stuents GROUP BY Cno; HAVING作用于组中选出条件连接查询 等值连接(连接运算符为=) select student.,sc. from student, sc where student.Sno = sc.sno; 自然连接(没有重复列的自然连接) select student.Sno, Sname, ssex,Sage,Sdept,Cno,Grade from student,Sc where Student.Sno=SC.Sno; 非等值连接(连接运算符不是=) 自身连接(需要给表起别名以示区别) select first.Cno,second.Cpno from Course first, Course second where first.cpno=second.cno; 外连接(左连接,通常就用join on ) select student.Sno, Sname,Ssex,Sage,Cno,Grade from student left join sc on student.sno=sc.sno; 复合条件连接 select student.Sno,student.Sname form student,Sc where student.sno=Sc.sno and sc.cno=’2’ and sc.Grade&gt;90; 多表连接 select student.Sno,Sname,Grade rom student,Sc,Course where student.Sno=SC.sno and Sc.Cno=Course.Cno; 嵌套查询(子查询){将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询} select Sname from student where Sno in (select sno from sc where cno=’2’); 集合查询 union 并(相当于or) intersect 交(相当于and) minus 差 (相当于前者与后者的补集的交) 任何情况 order by 只能出现在最后 分组与视图,索引 提高效率的2方法:索引,分区1 分组 (group by) 目的:可用聚合函数 like: select kid,count(id) from cj group by kid having count(id)&gt;=’3’; having(相当于where) 2 视图 创建视图: create view view_nam asselect column_name from table_namewhere condition create view view1 as select sno,cj.id,kc.kname from student2,cj,kc where id &gt;1;(这要表连接) 开头可加个 or replace 更新视图: update view_nam set sname=’liucheng’ where sno=’12’同基本表的更删改查 3 索引 创建唯一性索引:create unique index stusno on student(sno); 聚簇索引:create cluster index stusname on student(sname); drop index stusname; 存储过程(procedure) 语法结构: create or replace procedure 过程名 as 声明语句段; begin 执行语句段, exception 异常处理语句段; end; 流程控制 条件判断 if … then elsif then … else …end if;case … when … than …end; 循环结构 loop … exit when … end loop;while … loop … end loop;for i in … loop … end loop;goto,exit 游标(cursor) 是用于处理多行的句柄或指针 定义游标 cursor cursor_name is select id from student where …; 打开游标 open cursor_name; 提取游标 fetch cursor_name into 变量里;while cursor_name%found loop dbms_output.put_line(‘xuhao:’||变量); fetch cursor_name into 变量里;end loop 关闭游标close cursor_name;用for 就不需要后三🙅‍步 声明一个记录类型type name is record( 里面放多个变量) 游标属性 %found 布尔型属性,当最近一次读时成功返回即为true %notfound %isopen 当游标打开时返回true %rowcount 数字型属性 返回已从游标中读取的记录数 带参数的游标 cursor cursor_name(id number, name varchar) isselect id,sname from xuesheng where … 隐性游标 begin update employees set salary = salary+10; where employee_id = 101; if sql%notfound then dbms_output.put_line(‘查无此人’); end if;end; 创建函数(function) create or replace function func_name(id number,name varchar)return numberis –定义的,声明的变量,记录类型,游标;begin –函数的执行体exception –处理函数的异常end; 调用函数 select func_name from dual; 触发器(trigger) 通过某一个事件来隐性运行 create or replace trigger update_empafterupdate on emloyeesbegin 执行体end;","categories":[{"name":"DataDB","slug":"DataDB","permalink":"http://ershidai.github.io/categories/DataDB/"}],"tags":[{"name":"oracle","slug":"oracle","permalink":"http://ershidai.github.io/tags/oracle/"}]},{"title":"python爬虫模块","slug":"python爬虫模块","date":"2021-04-06T02:28:05.000Z","updated":"2021-12-04T16:47:14.128Z","comments":true,"path":"article/4989.html","link":"","permalink":"http://ershidai.github.io/article/4989.html","excerpt":"","text":"Python 爬虫训练一、基本爬虫三段式import requests response = requests.get('https://baidu.com') print(response.text) 即可打印来自baidu的前端代码 二、爬虫的数据清洗1.xpathfrom lxml import etree url = 'https://baidu.com' response = requests.get(url) #将源代码转化成网页结构 html = etree.HTML(response.text) #在通过xpath来选择数据 data_info=html.xpath('/html/body/div[2]/div[3]/div/div[2]/div[4]/div[1]/div[1]/a/p[1]/span[1]') print(data_info) 2.正则表达式（.*?）import re data = &#123;'fdasfagagawe'&#125; a = re.findall('[a-z]',data,re.S) print(a) 3.BeautifulSoup+CSS选择器1.四大类型： navigableString 文本类型 comment 注释 BeautifulSoup 文档数 –子节点 soup.head.children# 迭代器 也是一个对象 from bs4 import BeautifulSoup import requests import json url = 'https://www.baidu.com' response = requests.get(url) response.encoding = 'utf8' soup = BeautifulSoup(response.text,'lxml') print(soup.head.children)#打印的是一个对象 #要想打印出来必须迭代出来，也就是一条一条输出 for child in soup.head.children: print(child) #将他的子孙节点都迭代出来 for child in soup.descendants: print(child) #父节点 .parents 可迭代当前标签的所有父节点 for parent in soup.p.parents: print(parent) #兄弟节点 .next_sibling 获取下一个兄弟 .prev_sibling 获取上一个兄弟 #前后节点 .next_element .previous_element #可以加s 2.css选择器div.class#id 多层就空格 soup.find('div.hl-main span')#跟select_one一样，只一次 soup.find_all('a')#找出所有a标签 soup.select('div.hl-main span')#等同find_all","categories":[{"name":"coding","slug":"coding","permalink":"http://ershidai.github.io/categories/coding/"}],"tags":[{"name":"python","slug":"python","permalink":"http://ershidai.github.io/tags/python/"}]}],"categories":[{"name":"enjoy","slug":"enjoy","permalink":"http://ershidai.github.io/categories/enjoy/"},{"name":"虚拟化","slug":"虚拟化","permalink":"http://ershidai.github.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"},{"name":"coding","slug":"coding","permalink":"http://ershidai.github.io/categories/coding/"},{"name":"linux","slug":"linux","permalink":"http://ershidai.github.io/categories/linux/"},{"name":"github","slug":"github","permalink":"http://ershidai.github.io/categories/github/"},{"name":"科学计算","slug":"科学计算","permalink":"http://ershidai.github.io/categories/%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/"},{"name":"技巧","slug":"技巧","permalink":"http://ershidai.github.io/categories/%E6%8A%80%E5%B7%A7/"},{"name":"网站建设","slug":"网站建设","permalink":"http://ershidai.github.io/categories/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"},{"name":"DataDB","slug":"DataDB","permalink":"http://ershidai.github.io/categories/DataDB/"}],"tags":[{"name":"songer","slug":"songer","permalink":"http://ershidai.github.io/tags/songer/"},{"name":"docker","slug":"docker","permalink":"http://ershidai.github.io/tags/docker/"},{"name":"golang","slug":"golang","permalink":"http://ershidai.github.io/tags/golang/"},{"name":"工具","slug":"工具","permalink":"http://ershidai.github.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"python","slug":"python","permalink":"http://ershidai.github.io/tags/python/"},{"name":"分布式版本控制","slug":"分布式版本控制","permalink":"http://ershidai.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"},{"name":"vim","slug":"vim","permalink":"http://ershidai.github.io/tags/vim/"},{"name":"archlinux","slug":"archlinux","permalink":"http://ershidai.github.io/tags/archlinux/"},{"name":"sublime test 3","slug":"sublime-test-3","permalink":"http://ershidai.github.io/tags/sublime-test-3/"},{"name":"hexo","slug":"hexo","permalink":"http://ershidai.github.io/tags/hexo/"},{"name":"oracle","slug":"oracle","permalink":"http://ershidai.github.io/tags/oracle/"}]}